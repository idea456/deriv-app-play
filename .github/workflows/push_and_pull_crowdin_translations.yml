name: 'Update translations from Crowdin'

on:
  repository_dispatch:
    types:
      - file-fully-reviewed

jobs:
  synchronize-with-crowdin:
    runs-on: ubuntu-latest

    steps:
      # We checkout the master branch so we can run the translations
      # script on the latest changes.
      - name: Checkout master branch
        uses: actions/checkout@v2.3.4

      - name: "Create cache key"
        id: generate_cache_key
        run: |
          cache_key1=$(find . ./packages/ -maxdepth 2 -name package.json -type f -exec md5sum {} \; | sort -n | md5sum | cut -d" " -f1)
          echo "cache_key1=$cache_key1" >> "$GITHUB_OUTPUT"

      - name: Get cached dependencies
        id: cache_npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          key: ${{ runner.os }}-build-${{ steps.generate_cache_key.outputs.cache_key1 }}
          path: |
              node_modules
              packages/account/node_modules
              packages/api/node_modules
              packages/appstore/node_modules
              packages/bot-skeleton/node_modules
              packages/bot-web-ui/node_modules
              packages/cashier/node_modules
              packages/components/node_modules
              packages/core/node_modules
              packages/hooks/node_modules
              packages/cfd/node_modules
              packages/indicators/node_modules
              packages/p2p/node_modules
              packages/reports/node_modules
              packages/shared/node_modules
              packages/stores/node_modules
              packages/trader/node_modules
              packages/translations/node_modules
              packages/utils/node_modules
              packages/analytics/node_modules


      - name: Install dependencies
        if: ${{ steps.cache_npm.outputs.cache-hit != 'true' }}
        run: |
          npm run bootstrap

      # In this step we're doing a couple things:
      # - We generate a new messages.json
      # - We hash the newly generated messages.json and compare it with the messages.json on Crowdin.
      # - We download the latest translation files from Crowdin, if there are new files, we create a PR.
      - name: Generate and push to Crowdin
        run: |
          branch_name="deriv_app_translations"

          echo "Setting up Git identity"
          git config --global user.name "test"
          git config --global user.email "test@users.noreply.github.com"

          echo "Installing Crowdin CLI and bootstrapping project"
          sudo npm i -g @crowdin/cli
          
          # TODO: check if we still need to run this
          # npm run bootstrap

          echo "Checking out new branch [$branch_name]"
          git checkout -b "$branch_name"

          # Download latest translations from Deriv-app Crowdin
          cd $(git rev-parse --show-toplevel)/packages/translations
          echo "Attempting to download updated translations from Deriv-app Crowdin"
          crowdin download -T ${{ secrets.CROWDIN_API_KEY }} -i ${{ secrets.CROWDIN_PROJECT_ID }}

          # TODO: MAKE SURE TO UNCOMMENT THIS P2P DOWNLOAD PART LATER WHEN I CREATE A PULL REQUEST

          # Download latest translations from P2P Crowdin
          # cd $(git rev-parse --show-toplevel)/packages/p2p
          # echo "Attempting to download updated translations from P2P Crowdin"
          # crowdin download sources -T ${{ secrets.CROWDIN_API_KEY }} -i ${{ secrets.CROWDIN_PROJECT_ID }}

          if [ -z "$(git status --porcelain)" ]; then
            echo "Found no new translation files that need to be merged with master. Not creating a PR."
          else
            echo "Found updated translation files that need to be merged with master. Creating a PR."

            # Commit the newly downloaded files
            cd $(git rev-parse --show-toplevel)
            git add .
            git commit -m "translations: ðŸ“š sync translations with crowdin"

            # Force push to this branch in case a previous run created it.
            git push --set-upstream origin "$branch_name" -f

            sudo apt install gh
            gh auth login --with-token <<< ${{ github.token }}
            # gh pr close "$branch_name" || true
            gh pr create --fill --base "master" --head "adrienne-deriv:$branch_name"
          fi


      
